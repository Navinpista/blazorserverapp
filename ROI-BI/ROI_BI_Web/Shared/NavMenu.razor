@using ROIBIApp.Data
@using ROIBIApp.Models
@inject ROIMenuService MenuSvc

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">ROI</a>
		  <span class="navbar-brand" style="vertical-align:bottom; font-size:smaller">Business Intelligence</span> 
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
      @*  <nav class="flex-column">
    <div class="nav-item px-3">
    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
    <span class="oi oi-home" aria-hidden="true"></span> Home
    </NavLink>
    </div>
    <div class="nav-item px-3">
    <NavLink class="nav-link" href="counter">
    <span class="oi oi-plus" aria-hidden="true"></span> Counter
    </NavLink>
    </div>
    <div class="nav-item px-3">
    <NavLink class="nav-link" href="fetchdata">
    <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
    </NavLink>
    </div>
    </nav>*@
    


    @if (lstMenu is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul class="nav flex-column">
            @foreach (var menu in lstMenu)
            {
                @if (menu.ParentMenuId == 0)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@GetLink(menu.NavigateUrl)" @onclick="() => GetIsClicked(menu)">
                            <span aria-hidden="true" class="@menu.IconName"></span> @menu.MenuName
                        </NavLink>

                        <ul class="nav flex-column">
                            @foreach (var submenu in lstMenu)
                            {
                                @if (menu.MenuId == submenu.ParentMenuId)
                                {
                                    @if (expandSubNav && menu.MenuId == clickedMenu)
                                    {
                                        <li class="nav-item px-3">
                                            <NavLink class="nav-link" href="@GetLink(menu.NavigateUrl)" @onclick="() => GetIsClicked(submenu)">
                                                <span aria-hidden="true"></span> @submenu.MenuName
                                            </NavLink>
                                        </li>
                                    }
                                }
                            }
                        </ul>
                    </li>
                }
            }
        </ul>
    }

</div>

@code {
    private bool expandSubNav;
    private bool collapseNavMenu = true;
    private int clickedMenu = 0;
    private bool hasPageName = true;
    private int prevClickMenu = 0;

    public IEnumerable<Roimenu>? lstMenu;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        if (hasPageName)
        {
            collapseNavMenu = !collapseNavMenu;
        }
    }

    public string GetLink(string reportid)
    {
        return $"ROIBIReport/{reportid}";
    }

    public void GetIsClicked(Roimenu menu)
    {
        clickedMenu = menu.MenuId;
        if (prevClickMenu != clickedMenu)
        {
            expandSubNav = false;
            if (menu.NavigateUrl != "" || menu.MenuName == "Home")
            {
                hasPageName = true;
            }
            else
            {
                expandSubNav = !expandSubNav;
                hasPageName = false;
            }
        }
        else
        {
            expandSubNav = !expandSubNav;
        }
        prevClickMenu = clickedMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        lstMenu = await MenuSvc.GetROIMenu();
    }
}
