@using ROI_BI_Lib.Data
@using ROI_BI_Lib.Models
@inject ROIMenuService MenuSvc
@using System.Reflection
@using System.Collections;

@code {
    private bool expandSubNav;
    private bool collapseNavMenu = true;
    private int clickedMenu = 0;
    private bool hasPageName = true;
    private int prevClickMenu = 0;

    public IEnumerable<Roimenu> lstMenu;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    string[] MenuItems = new string[] {"Dashboard", "Person"};

    public string GetIconValue(string IconName)
    {
        return typeof(Icons.Material.Outlined).GetField(IconName).GetValue(null).ToString();
    }

    private void ToggleNavMenu()
    {
        if (hasPageName)
        {
            collapseNavMenu = !collapseNavMenu;
        }
    }

    public string GetLink(string reportid)
    {
        return $"ROIBIReport/{reportid}";
    }

    public void GetIsClicked(Roimenu menu)
    {
        clickedMenu = menu.MenuId;
        if (prevClickMenu != clickedMenu)
        {
            expandSubNav = false;
            if (menu.NavigateUrl != "" || menu.MenuName == "Home")
            {
                hasPageName = true;
            }
            else
            {
                expandSubNav = !expandSubNav;
                hasPageName = false;
            }
        }
        else
        {
            expandSubNav = !expandSubNav;
        }
        prevClickMenu = clickedMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        lstMenu = await MenuSvc.GetROIMenu();
    }
}


<MudPaper Width="250px" Class="d-inline-flex py-3" Elevation="0">
    <MudNavMenu Class="mud-width-full" Bordered="true">

        @if (lstMenu is null)
        {
            <p><MudProgressCircular Color="Color.Default" Indeterminate="true" /></p>
        }
        else
        {
            @foreach (var menu in lstMenu)
            {
                @if (menu.ParentMenuId == 0)
                {
                    if (menu.IsGroup)
                    {
                        <MudNavGroup title="@menu.GroupName" Icon="@GetIconValue(menu.IconName)">

                            @foreach (var submenu in lstMenu.Where(x => x.ParentMenuId == menu.MenuId))
                            {
                                <MudNavLink Href="@GetLink(submenu.NavigateUrl)" Icon="@GetIconValue(submenu.IconName)">@submenu.MenuName</MudNavLink>
                            }
                        </MudNavGroup>
                    }
                    else
                    {
                        <MudNavLink Href="@GetLink(menu.NavigateUrl)" Icon="@GetIconValue(menu.IconName)">@menu.MenuName</MudNavLink>
                    }
                }
               
            }
        }
    </MudNavMenu>
</MudPaper>

