@page "/"
@layout MainLayoutEmpty;
@inject ProtectedSessionStorage protectedSessionStore;
@inject ProtectedLocalStorage protectedLocalStore;
@inject Data.ROILoginService LoginSvc;
@inject NavigationManager NavigationMgr;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Models.Dto;

<div id="bg"></div>
<section class="login roiform" id='login'>
    <MudPaper Class="pa-4">
        <div class="head">
            <h1 class='company'>ROI-BI</h1>
        </div>
        <p class='msg'></p>
        <div class='form'>
            <form>
                <input type="text" placeholder='Username' @bind-value="login.Username" class='text' id='username' required><br>
                <input type="password" placeholder='••••••••••••••' class='password'><br>
                <a href="#" class='btn-login' id='do-login' @onclick="Signin">Login</a>
                <a href="#" class='forgot'> </a>
            </form>
        </div>
    </MudPaper>
</section>

@*            <MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Username" @bind-value="login.Username" Required="true" RequiredError="User name is required!"/>
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" />

                    <div class="d-flex align-center justify-space-between">
                        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!"  />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                    </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>
*@

@code {
    LoginDTO login = new LoginDTO();

    private async void Signin()
    {
        await protectedSessionStore.SetAsync("LoginStatus", "True");
        var signinResult = LoginSvc.SignIn(login);
        var loginstatus = await protectedSessionStore.GetAsync<string>("LoginStatus");
        NavigationMgr.NavigateTo("/index");
    }
}


    @code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}