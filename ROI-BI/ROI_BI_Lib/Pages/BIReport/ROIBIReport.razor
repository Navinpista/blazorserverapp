@page "/ROIBIReport/{reportid}"
@using System.Net.Http
@using System.Threading.Tasks
@using Microsoft.Identity.Client
@using Microsoft.PowerBI.Api
@using Microsoft.PowerBI.Api.Models
@using Microsoft.Rest
@using Newtonsoft.Json.Linq
@using Microsoft.Extensions.Configuration
@using ROI_BI_Lib.Data
@using ROI_BI_Lib.Models
@inject IJSRuntime JSRuntime
@inject ROIReportService ROIReportSvc

<h3>ROI Power BI Report</h3>


@*<MudGrid>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"><MudDatePicker Label="Only Calendar"  DisableToolbar="true" /></MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"><MudDatePicker Label="Only Calendar"  DisableToolbar="true" /></MudPaper>
    </MudItem>
    <MudItem xs="6">
    </MudItem>
</MudGrid>
*@

@*
<MudAppBar Fixed="false" Color="Color.Warning" Dense="true">*@


<MudPaper Class="d-flex pa-2" Outlined="true">
    <MudDatePicker Class="pa-1 mr-16" DisableToolbar="true" Label="From" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" />
    <MudDatePicker Class="pa-1 mr-16" DisableToolbar="true" Label="To" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="MM/dd/yyyy" />
    <MudButton Class="pa-1 mr-16" Style="height:40px;margin-top:20px" Variant="Variant.Filled" Color="Color.Primary">Get Report</MudButton>

</MudPaper>
<br />
@*</MudAppBar>*@

<div style="width:100%;height:600px;max-width: 2000px" id="divReport" @ref="@PowerBIElement">
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
</div>


@code {
    private ElementReference PowerBIElement;
    string TenantID;
    string ClientID;
    string ClientSecret;
    string workspaceId;
    string reportId;
    string ReportStatusHtml;
    bool IsDashboard = false;

    [Parameter]
    public string reportid { get; set; }


    //protected override async void OnParametersSet()
    //{
    //    Roireport rd = await ROIReportSvc.GetROIReportdetails(reportid);

    //    TenantID = rd.TenantId;
    //    ClientID = rd.ClientId;
    //    ClientSecret = rd.ClientSecret;
    //    workspaceId = rd.WorkspaceId;
    //    reportId = rd.ReportId;
    //}


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        ROI_BI_Lib.Models.Report rd = await ROIReportSvc.GetROIReportdetails(reportid);

        if (rd is not null)
        {
            ReportStatusHtml = "Fetching Report...";
            TenantID = rd.Tenant.TenantGuid;
            ClientID = rd.Tenant.ClientGuid;
            ClientSecret = rd.Tenant.ClientSecret;
            workspaceId = rd.Tenant.WorkspaceGuid;
            reportId = rd.ReportGuid;
            IsDashboard = rd.IsDashboard.Value;

            //if (firstRender)
            //{
            try
            {
                //var result = new PowerBIEmbedConfig();


                AuthenticationResult authenticationResult = await DoAuthentication();
                var tokenCredentials = new TokenCredentials(authenticationResult.AccessToken, "Bearer");
                var generateTokenRequestParameters = new GenerateTokenRequest(accessLevel: "view");


                using (var client = new PowerBIClient(new Uri("https://api.powerbi.com/"), tokenCredentials))
                {

                    if (IsDashboard)
                    {
                        var dashboard = await client.Dashboards.GetDashboardAsync(new Guid(workspaceId), new Guid(reportId));
                        var tokenResponse = await client.Dashboards.GenerateTokenAsync(new Guid(workspaceId), dashboard.Id, generateTokenRequestParameters);
                        await BIReportinterop.CreateReport(JSRuntime, PowerBIElement, tokenResponse.Token, dashboard.EmbedUrl, dashboard.Id.ToString(),"dashboard");
                    }
                    else

                    {
                        var report = await client.Reports.GetReportInGroupAsync(new Guid(workspaceId), new Guid(reportId));
                        var tokenResponse = await client.Reports.GenerateTokenAsync(new Guid(workspaceId), new Guid(reportId), generateTokenRequestParameters);
                        await BIReportinterop.CreateReport(JSRuntime, PowerBIElement, tokenResponse.Token, report.EmbedUrl, report.Id.ToString(),"report");
                    }

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // }
        }
        else
        {
            ReportStatusHtml = "No Reports Found!";
        }
    }

    private const string AuthorityFormat = "https://login.microsoftonline.com/{0}/v2.0";
    private const string MSGraphScope = "https://analysis.windows.net/powerbi/api/.default";
    private async Task<AuthenticationResult> DoAuthentication()
    {
        AuthenticationResult authResult = default;
        try
        {
            IConfidentialClientApplication daemonClient;
            daemonClient = ConfidentialClientApplicationBuilder.Create(ClientID)
                .WithAuthority(string.Format(AuthorityFormat, TenantID))
                .WithClientSecret(ClientSecret)
                .Build();
            authResult = await daemonClient.AcquireTokenForClient(new[] { MSGraphScope }).ExecuteAsync();
        }
        catch (Exception ex)
        {
            //log the error
            return authResult;
        }
        return authResult;
    }
}


@*<input type="text" value=@reportid>*@
@*<input type="text" @bind=@TenantID>*@
@*
<div>@ClientID</div>
<div>@ClientSecret</div>
<div>@workspaceId</div>
<div>@reportId</div>*@
@*<div @ref="@PowerBIElement" style="width:100%;height:600px;max-width: 2000px" id="divReport">
    <MudProgressCircular Color="Color.Default" Indeterminate="true" /> <div id="divReportContainer"> @((MarkupString)ReportStatusHtml)</div>
</div>
*@





